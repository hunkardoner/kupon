import React from 'react';
import {
  FlatList,
  ActivityIndicator,
  useWindowDimensions,
} from 'react-native';
import styled from 'styled-components/native';
import {
  useNavigation,
  CompositeNavigationProp,
} from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';
import { HomeStackParamList, MainTabParamList } from '../navigation/types';
import {
  fetchCategories,
  fetchSliders,
  fetchCouponCodes,
  fetchBrands,
} from '../api';
import { Category, Slider, Coupon, Brand } from '../types';
import SectionHeaderComponent from '../components/common/SectionHeaderComponent';
import CardComponent from '../components/common/CardComponent';
import SliderComponent from '../components/common/SliderComponent';
import { useQuery } from '@tanstack/react-query';
import { useTheme } from '../theme';
import { 
  Container, 
  CenteredContainer, 
  ScrollContainer,
  Text 
} from '../components/styled';

// Styled Components
const LoadingContainer = styled(CenteredContainer)`
  background-color: ${(props: any) => props.theme.colors.background};
`;

const ErrorText = styled(Text)`
  color: ${(props: any) => props.theme.colors.error};
  text-align: center;
  padding: ${(props: any) => props.theme.spacing.lg}px;
`;

const SectionContainer = styled.View`
  margin-bottom: ${(props: any) => props.theme.spacing.lg}px;
`;

const ItemsContainer = styled.View<{ numColumns: number }>`
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  padding-horizontal: ${(props: any) => props.theme.spacing.sm}px;
`;

const ItemWrapper = styled.View<{ width: number }>`
  width: ${(props: any) => props.width}px;
  margin-bottom: ${(props: any) => props.theme.spacing.sm}px;
`;

// HomeScreen için birleşik navigasyon tipi
type HomeScreenNavigationProp = CompositeNavigationProp<
  StackNavigationProp<HomeStackParamList, 'Home'>, // Changed 'HomeMain' to 'Home'
  BottomTabNavigationProp<MainTabParamList>
>;

const HomeScreen: React.FC = () => {
  const navigation = useNavigation<HomeScreenNavigationProp>();
  const { width } = useWindowDimensions(); // Get window dimensions
  const styles = createStyles(width); // Create styles dynamically

  const {
    data: categories,
    isLoading: categoriesLoading,
    error: categoriesError,
  } = useQuery<Category[], Error>({
    queryKey: ['categories'],
    queryFn: fetchCategories,
  });

  const {
    data: sliders,
    isLoading: slidersLoading,
    error: slidersError,
  } = useQuery<Slider[], Error>({
    queryKey: ['sliders'],
    queryFn: fetchSliders,
  });

  const {
    data: popularCoupons,
    isLoading: couponsLoading,
    error: couponsError,
  } = useQuery<Coupon[], Error>({
    queryKey: ['popularCoupons'],
    queryFn: () => fetchCouponCodes({ limit: 5, popular: true }),
  });

  const {
    data: popularBrands,
    isLoading: brandsLoading,
    error: brandsError,
  } = useQuery<Brand[], Error>({
    queryKey: ['popularBrands'],
    queryFn: () => fetchBrands({ limit: 5, popular: true }),
  });

  const isLoading =
    categoriesLoading || slidersLoading || couponsLoading || brandsLoading;
  const error = categoriesError || slidersError || couponsError || brandsError;

  if (isLoading) {
    return (
      <ActivityIndicator
        size="large"
        color={COLORS.primary}
        style={styles.centered}
      />
    );
  }

  if (error) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorText}>
          Veri yüklenirken bir hata oluştu: {error.message}
        </Text>
      </View>
    );
  }

  const handleCategoryPress = (item: Category) => {
    console.log('Category pressed:', item.name);
    navigation.navigate('CategoriesTab', {
      screen: 'CategoryDetail',
      params: { categoryId: item.id },
    });
  };

  const handleCouponPress = (item: Coupon) => {
    navigation.navigate('CouponsTab', {
      screen: 'CouponDetail',
      params: { couponId: item.id },
    });
  };

  const handleBrandPress = (item: Brand) => {
    navigation.navigate('BrandsTab', {
      screen: 'BrandDetail',
      params: { brandId: item.id },
    });
  };

  const handleSliderPress = (slider: Slider) => {
    console.log('Slider pressed:', slider.title);
    if (slider.related_coupon_id) {
      navigation.navigate('CouponsTab', {
        screen: 'CouponDetail',
        params: { couponId: slider.related_coupon_id },
      });
    } else if (slider.related_brand_id) {
      navigation.navigate('BrandsTab', {
        screen: 'BrandDetail',
        params: { brandId: slider.related_brand_id },
      });
    }
    // else if (slider.link_url) { /* Open link_url */ }
  };

  return (
    <ScrollView style={styles.container}>
      {sliders && sliders.length > 0 && (
        <SliderComponent sliders={sliders} onPressSlider={handleSliderPress} />
      )}

      {categories && categories.length > 0 && (
        <View style={styles.sectionContainer}>
          <SectionHeaderComponent title="Kategoriler" />
          <FlatList
            data={categories}
            renderItem={({ item }) => (
              <CardComponent
                item={{ ...item, type: 'category' }}
                onPress={() => handleCategoryPress(item)}
                horizontal={true}
              />
            )}
            keyExtractor={item => item.id.toString()}
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.horizontalList}
            ItemSeparatorComponent={() => <View style={{ width: 16 }} />}
          />
        </View>
      )}

      {popularCoupons && popularCoupons.length > 0 && (
        <View style={styles.sectionContainer}>
          <SectionHeaderComponent
            title="Popüler Kuponlar"
            onSeeAllPress={() =>
              navigation.navigate('CouponsTab', { screen: 'CouponList' })
            }
          />
          <FlatList
            data={popularCoupons}
            renderItem={({ item }) => (
              <CardComponent
                item={{ ...item, type: 'coupon' }}
                onPress={() => handleCouponPress(item)}
                horizontal={true}
              />
            )}
            keyExtractor={item => item.id.toString()}
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.horizontalList}
            ItemSeparatorComponent={() => <View style={{ width: 16 }} />}
          />
        </View>
      )}

      {popularBrands && popularBrands.length > 0 && (
        <View style={styles.sectionContainer}>
          <SectionHeaderComponent
            title="Popüler Markalar"
            onSeeAllPress={() =>
              navigation.navigate('BrandsTab', { screen: 'BrandList' })
            }
          />
          <FlatList
            data={popularBrands}
            renderItem={({ item }) => (
              <CardComponent
                item={{ ...item, type: 'brand' }}
                onPress={() => handleBrandPress(item)}
                horizontal={true}
              />
            )}
            keyExtractor={item => item.id.toString()}
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.horizontalList}
            ItemSeparatorComponent={() => <View style={{ width: 16 }} />}
          />
        </View>
      )}
    </ScrollView>
  );
};

export default HomeScreen;
